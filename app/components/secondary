import React, { useState, useEffect } from 'react';

interface Course {
  id: number;
  title: string;
  description: string;
}

const CourseManagement: React.FC = () => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [newCourse, setNewCourse] = useState({ title: '', description: '' });
  const [message, setMessage] = useState('');
  const [userRole, setUserRole] = useState('');
  const [enrollingCourse, setEnrollingCourse] = useState<number | null>(null);
  const [error, setError] = useState('');
  const [enrolledCourses, setEnrolledCourses] = useState<number[]>([]);
  const [courseStats, setCourseStats] = useState<any[]>([]);
  const [instructorCourses, setInstructorCourses] = useState<any[]>([]);
  const [popularCourse, setPopularCourse] = useState<string | null>(null);

  useEffect(() => {
    const role = localStorage.getItem('role');
    setUserRole(role || '');
    fetchCourses();
    fetchDashboardStats();
    if (role === 'student') {
      fetchEnrolledCourses();
    }
  }, []);

  const fetchDashboardStats = async () => {
    try {
      const response = await fetch('http://localhost:5000/dashboard-stats', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setCourseStats(data.enrollment_statistics || []);
        setInstructorCourses(data.instructor_courses || []);
        setPopularCourse(data.most_popular_course || null);
      } else {
        console.error('Failed to fetch dashboard stats');
      }
    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
    }
  };

  const fetchCourses = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch('http://localhost:5000/courses', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch courses');
      }

      const data = await response.json();
      setCourses(data || []);
    } catch (error) {
      setError('Error fetching courses. Please make sure the server is running.');
      console.error('Fetch error:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchEnrolledCourses = async () => {
    try {
      const response = await fetch('http://localhost:5000/enrollments', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setEnrolledCourses(data.map((enrollment: any) => enrollment.course_id) || []);
      } else {
        setError('Error fetching enrolled courses');
      }
    } catch (error) {
      setError('Error fetching enrolled courses');
      console.error('Fetch error:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage('');

    try {
      const response = await fetch('http://localhost:5000/courses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({
          ...newCourse,
          instructor_id: localStorage.getItem('user_id'),
        }),
      });

      if (response.ok) {
        setMessage('Course created successfully!');
        setNewCourse({ title: '', description: '' });
        fetchCourses();
      } else {
        const data = await response.json();
        setMessage(data.error || 'Error creating course');
      }
    } catch (error) {
      setMessage('Server error. Please check your connection.');
    }
  };

  const handleEnroll = async (courseId: number) => {
    setEnrollingCourse(courseId);
    setMessage('');

    try {
      const response = await fetch('http://localhost:5000/enrollments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({
          course_id: courseId,
          student_id: localStorage.getItem('user_id'),
        }),
      });

      if (response.ok) {
        setMessage('Successfully enrolled!');
        setEnrolledCourses((prev) => [...prev, courseId]);
        fetchCourses();
      } else {
        const data = await response.json();
        setMessage(data.error || 'Error enrolling in course');
      }
    } catch (error) {
      setMessage('Error during enrollment');
      console.error(error);
    } finally {
      setEnrollingCourse(null);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return (
    <div className="p-4">
      {courseStats.length > 0 && (
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-4">Enrollment Statistics</h3>
          <ul>
            {courseStats.map((stat: any, index: number) => (
              <li key={index} className="mb-2">
                <span className="font-bold">{stat.course_title}:</span> {stat.student_count} students enrolled
              </li>
            ))}
          </ul>
        </div>
      )}

      {instructorCourses.length > 0 && (
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-4">Instructor Courses</h3>
          <ul>
            {instructorCourses.map((course: any, index: number) => (
              <li key={index} className="mb-2">
                <span className="font-bold">{course.course_title}:</span> Taught by {course.instructor_name}
              </li>
            ))}
          </ul>
        </div>
      )}

      {popularCourse && (
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-4">Most Popular Course</h3>
          <p>{popularCourse}</p>
        </div>
      )}

      {/* Add additional UI for course management */}
    </div>
  );
};

export default CourseManagement;
